{"pageProps":{"docs":{"content":"# Wallet\n\n## createWallet\n\nThe createWallet function is used to create a wallet interface with a specified connector.\n\n```ts\ntype CreateWallet = (connector: Connector) => Wallet;\n```\n\nExample usage:\n\n```ts\nimport { MetaMask } from '@react-web3-wallet/MetaMask';\nimport { createWallet } from '@react-web3-wallet/react';\n\nconst metaMask = createWallet(new MetaMask());\n```\n\n## Wallet API\n\n```ts\ninterface Wallet {\n  getWalletName: () => WalletName;\n  connect: (chain?: number | AddEthereumChainParameter) => Promise<void>;\n  autoConnect: () => Promise<boolean>;\n  disconnect: (force?: boolean) => Promise<void>;\n  watchAsset: (asset: WatchAssetParameter) => Promise<void>;\n  useIsConnecting: () => boolean;\n  useIsConnected: () => boolean;\n  useChainId: () => number | undefined;\n  useAccount: () => string | undefined;\n  useBalance: () => bigint | undefined;\n  useProvider: (network?: Networkish) => BrowserProvider | undefined;\n  useHasProvider: (\n    providerFilter?: (provider: Provider) => boolean,\n    detectProviderOptions?: DetectProviderOptions,\n  ) => boolean;\n}\n```\n\n### getWalletName\n\n```ts\ninterface Wallet {\n  getWalletName: () => WalletName;\n}\n```\n\nReturns the name of the wallet. A dApp can support multiple wallets, and the wallet name serves as a unique identifier for each wallet.\n\n### connect\n\n```ts\nexport interface AddEthereumChainParameter {\n  chainId: number;\n  chainName: string;\n  nativeCurrency: {\n    name: string;\n    symbol: string;\n    decimals: 18;\n  };\n  rpcUrls: string[];\n  blockExplorerUrls?: string[];\n  /**\n   * Currently ignored.\n   */\n  iconUrls?: string[];\n}\n\ntype ChainId = number\n\ninterface Wallet {\n  connect(chain?: ChainId | AddEthereumChainParameter) => Promise<void>\n}\n```\n\nInitiates a connection to the wallet. You can pass the `chain` parameter to specify the desired chain to connect to. If the user is already connected to this chain, no additional steps will be taken. Otherwise, the user will be prompted to switch to the chain, if one of two conditions is met:\n\n1. either the chain already have it added in their extension,\n2. or the argument is of type AddEthereumChainParameter, in which case the user will be prompted to add the chain with the specified parameters first, before being prompted to switch.\n\n### autoConnect\n\n```ts\ninterface Wallet {\n  autoConnect() => Promise<boolean>\n}\n```\n\nAttempts to connect to the wallet automatically. The autoConnect function never rejects and always resolves. It only attempts to establish a connection without requiring further user interaction during the connecting process.\n\nthe returned promise will:\n\n1.  resolve with `true` if the connection succeeded.\n2.  resolve with `false` if the connection failed.\n\n### disconnect\n\n```ts\ninterface Wallet {\n  disconnect(force?: boolean) => Promise<void>\n}\n```\n\nDisconnects the wallet. Wallet connector implementations should override this method if the wallet supports forceful disconnection.\n\nWhat is force disconnection?\n\n- Forceful disconnection completely disconnects the wallet from the dApp.\n- Non-forceful disconnection only resets the wallet store to its initial state. Behind the scenes, the wallet is still connected to the dApp.\n\nFor certain wallets like MetaMask, there is no way to forcefully disconnect from dApps.\n\nFor other wallets like WalletConnect, users have the option to forcefully disconnect from dApps.\n\n### watchAsset\n\n> This method is specified by [EIP-747](https://eips.ethereum.org/EIPS/eip-747)\n\n```ts\ninterface WatchAssetParameter {\n  address: string;\n  symbol: string;\n  decimals: number;\n  image: string;\n}\ninterface Wallet {\n  watchAsset: (asset: WatchAssetParameter) => Promise<void>;\n}\n```\n\nAdds an asset to the wallet's list of tracked assets.\n\n### useIsConnecting\n\n```ts\ninterface Wallet {\n  useIsConnecting: () => boolean;\n}\n```\n\nIndicates whether there's a pending connection. A connection can be initiated by calling either `Wallet.connect` or `Wallet.autoConnect`.\n\n### useAccount\n\n```ts\ninterface Wallet {\n  useAccount: () => string | undefined;\n}\n```\n\nReturns the active user wallet account(the account that the user current selected in the wallet extension/app).\n\n### useBalance\n\n```ts\ninterface Wallet {\n  useBalance: () => bigint | undefined;\n}\n```\n\nReturns the active user wallet account balance.\n\n### useChainId\n\nReturns the active user wallet chainId.\n\n```ts\ninterface Wallet {\n  useChainId: () =>  number| undefined;\n}\n```\n\n### useIsConnected\n\n```ts\ninterface Wallet {\n  useIsConnected: () => boolean;\n}\n```\n\nIndicates whether user is connected to the wallet. If `isConnected` is true, we can assume that:\n\n1. the dApp/web3 site can access to the user's account.\n2. the wallet provider can make RPC requests to the current chain.\n\nuseIsConnected is a convenient hook:\n\n```ts\nconst useIsConnected = (): boolean => {\n  return !!useAccount() && !!useChainId();\n};\n```\n\n### useProvider\n\n```ts\ninterface Wallet {\n  useProvider: (network?: Networkish) => BrowserProvider | undefined;\n}\n```\n\nReturns a `BrowserProvider` instance that wraps the underling wallet provider.\n\n### useHasProvider\n\n`useHasProvider` can be used to detect whether a wallet is available(installed) on user's device(browser).\n\n```ts\nconst hasMetaMask = metaMask.useHasProvider();\n\nif (!hasMetaMask) {\n  // redirect user to the wallet install page\n}\n```\n","toc":[{"id":"createwallet","indent":1,"content":"createWallet"},{"id":"wallet-api","indent":1,"content":"Wallet API"},{"id":"getwalletname","indent":2,"content":"getWalletName"},{"id":"connect","indent":2,"content":"connect"},{"id":"autoconnect","indent":2,"content":"autoConnect"},{"id":"disconnect","indent":2,"content":"disconnect"},{"id":"watchasset","indent":2,"content":"watchAsset"},{"id":"useisconnecting","indent":2,"content":"useIsConnecting"},{"id":"useaccount","indent":2,"content":"useAccount"},{"id":"usebalance","indent":2,"content":"useBalance"},{"id":"usechainid","indent":2,"content":"useChainId"},{"id":"useisconnected","indent":2,"content":"useIsConnected"},{"id":"useprovider","indent":2,"content":"useProvider"},{"id":"usehasprovider","indent":2,"content":"useHasProvider"}]},"route":{"label":"Wallet","slug":["wallet"],"path":"/home/runner/work/web3-wallet/web3-wallet/docs/wallet.md"}},"__N_SSG":true}