{"pageProps":{"docs":{"content":"# CurrentWallet\n\nIt's a common pattern that a dApp allows users to connect to several supported wallets, but with only one wallet as the current/active wallet. This pattern is so common that we made the currentWallet builtin, so that you don't need maintain the current wallet appearance in your application code.\n\n## createCurrentWallet\n\n```ts\ntype CreateCurrentWalletOptions = {\n  defaultCurrentWallet?: WalletName;\n  isPersist?: boolean;\n  persistKey?: string;\n  plugins?: Plugin[];\n};\n\ntype CreateCurrentWallet = (\n  connectorsOrWallets: (Connector | Wallet)[],\n  options: CreateCurrentWalletOptions,\n) => CurrentWallet;\n```\n\nThe currentWallet object is returned from createCurrentWallet.\n\n```ts\nimport { MetaMask } from '@web3-wallet/metamask';\nimport { DeFiWallet } from '@web3-wallet/defiwallet';\nimport { createCurrentWallet } from '@web3-wallet/react';\nimport { EnsPlugin } from '@web3-wallet/plugin-ens';\nimport { BalancePlugin } from '@web3-wallet/plugin-balance';\n\nexport const currentWallet = new createCurrentWallet(\n  [new MetaMask(), new DefiWallet()],\n  { plugins: [EnsPlugin.create(), BalancePlugin.create()] },\n);\n```\n\n### defaultCurrentWallet\n\nThe default currentWallet, default to the first wallet if not provided.\n\n### isPersist\n\nWhether to persist the current wallet state. default true.\n\n### persistKey\n\nThe currentWallet state will be persist to local storage, you can specify the local storage key through the persistKey option, default to `@web3-wallet/currentWallet`.\n\n### plugins\n\nSee [Plugin](https://web3-wallet.github.io/web3-wallet/docs/wallet)\n\n## CurrentWallet API\n\nMost of the wallet APIs are also available on currentWallet. below only list the currentWallet only APIs. See [Wallet](https://web3-wallet.github.io/web3-wallet/docs/wallet).\n\n```ts\nexport interface CurrentWallet {\n  useName: () => WalletName;\n  useConnectionStatus: () => WalletConnectionStatus;\n  switchCurrentWallet: (name: WalletName) => void;\n  connectAsCurrentWallet: (\n    name: WalletName,\n    chain?: number | AddEthereumChainParameter,\n  ) => Promise<void>;\n  useConnectAsCurrentWallet: WrappedUseMutation<\n    void,\n    unknown,\n    { walletName: WalletName; chain?: number | AddEthereumChainParameter }\n  >;\n}\n```\n\n### useName\n\n```ts\ninterface CurrentWallet {\n  useName: () => WalletName;\n}\n```\n\nReturns the currentWallet name.\n\n### useConnectionStatus\n\n```ts\nexport enum WalletConnectionStatus {\n  Untouched = 'Untouched',\n  Connected = 'Connected',\n  Disconnected = 'Disconnected',\n}\n\nexport interface CurrentWallet extends Wallet {\n  useName: () => WalletName;\n  useConnectionStatus: () => WalletConnectionStatus;\n  useConnectAsCurrentWallet: WrappedUseMutation<\n    void,\n    unknown,\n    { walletName: WalletName; chain?: number | AddEthereumChainParameter }\n  >;\n}\n```\n\nReturns the currentWallet connection status.\n\n**WalletConnectionStatus**\n\nThe currentWallet connection status are persisted to localStorage. The connection status can only be update by calling connect, autoConnect and disconnect.\n\n- `Untouched`: connect or autoConnect have never been called or all the calls to connect or autoConnect are rejected.\n- `Connected`: calls to either connect or autoConnect resolved.\n- `Disconnected`: calls to disconnect resolved.\n\nIf currentWallet is in the `Disconnected` status, autoConnect will be skipped.\n\n### switchCurrentWallet\n\n```ts\nexport interface CurrentWallet {\n  switchCurrentWallet: (name: WalletName) => void;\n}\n```\n\nSet the specified wallet as the currentWallet.\n\n### connectAsCurrentWallet\n\n```ts\nexport interface CurrentWallet {\n  connectAsCurrentWallet: (\n    name: WalletName,\n    chain?: number | AddEthereumChainParameter,\n  ) => Promise<void>;\n}\n```\n\nConnect with the specified wallet and set it as the currentWallet if the connection succeed/resolved.\n\n### useConnectAsCurrentWallet\n\nconnectAsCurrentWallet wrapped with [useMutation](https://tanstack.com/query/v4/docs/reference/useMutation).\n","toc":[{"id":"createcurrentwallet","indent":1,"content":"createCurrentWallet"},{"id":"defaultcurrentwallet","indent":2,"content":"defaultCurrentWallet"},{"id":"ispersist","indent":2,"content":"isPersist"},{"id":"persistkey","indent":2,"content":"persistKey"},{"id":"plugins","indent":2,"content":"plugins"},{"id":"currentwallet-api","indent":1,"content":"CurrentWallet API"},{"id":"usename","indent":2,"content":"useName"},{"id":"useconnectionstatus","indent":2,"content":"useConnectionStatus"},{"id":"switchcurrentwallet","indent":2,"content":"switchCurrentWallet"},{"id":"connectascurrentwallet","indent":2,"content":"connectAsCurrentWallet"},{"id":"useconnectascurrentwallet","indent":2,"content":"useConnectAsCurrentWallet"}]},"route":{"label":"CurrentWallet","slug":["current-wallet"],"path":"/home/runner/work/web3-wallet/web3-wallet/docs/current-wallet.md"}},"__N_SSG":true}