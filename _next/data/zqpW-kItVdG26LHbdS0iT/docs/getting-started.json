{"pageProps":{"docs":{"content":"# Get Started\n\n## Install\n\n```bash\npnpm add @web3-wallet/react @web3-wallet/metamask\n```\n\n## Create a wallet\n\nIf you only need to integrate a single wallet to your dApp:\n\n```ts\nimport { MetaMask } from '@web3-wallet/metamask';\nimport { createWallet } from '@web3-wallet/react';\n\nconst metamask = createWallet(new MetaMask());\n\nconst {\n  getName,\n  getPlugin,\n  connect,\n  autoConnect,\n  disconnect,\n  useIsConnecting,\n  useIsConnected,\n  useAccounts,\n  useChainId,\n  useProvider,\n} = metamask;\n\nexport const App = () => {\n  const walletName = getName();\n  const isConnecting = useIsConnecting();\n  const isConnected = useIsConnected();\n  const chainId = useChainId();\n  const accounts = useAccounts();\n  const provider = useProvider();\n\n  useEffect(() => {\n    autoConnect();\n  }, []);\n\n  // ....\n};\n```\n\n## Create a current wallet\n\nIt's a common pattern that a dApp allows users to connect to several supported wallets, but with only one wallet as the current/active wallet. If this is your case, you should use a current wallet instead.\n\n```ts\nimport { MetaMask } from '@web3-wallet/metamask';\nimport { DefiWallet } from '@web3-wallet/defiwallet';\nimport { createCurrentWallet } from '@web3-wallet/react';\n\nconst connectors = [new MetaMask(), new DefiWallet()];\n\nexport const currentWallet = new createCurrentWallet(connectors);\n\nconst {\n  getPlugin,\n  connect,\n  autoConnect,\n  disconnect,\n  useIsConnecting,\n  useIsConnected,\n  useAccounts,\n  useChainId,\n  useProvider,\n\n  // current wallet only apis\n  useName,\n  switchCurrentWallet,\n  connectAsCurrentWallet,\n} = currentWallet;\n\nexport const App = () => {\n  const walletName = useName();\n  const isConnecting = useIsConnecting();\n  const isConnected = useIsConnected();\n  const chainId = useChainId();\n  const accounts = useAccounts();\n  const provider = useProvider();\n\n  useEffect(() => {\n    autoConnect();\n  }, []);\n\n  // ....\n};\n```\n\n## Use with @tanstack/query\n\n@tanstack/query is a fantastic and very popular library for async state(server side state) management. Web3 wallet uses @tanstack/query under the hood for managing async state. But the core wallet functionalities of does not depends on @tanstack/query. If all you need is the core wallet functionalities, you don't need to setup @tanstack/query.\n\nIn order use web3-wallet with @tanstack/query, all you need to do is Wrap your App component with `Web3WalletQueryClientProvider`.\n\n```tsx\nimport { theme } from '@site/theme';\nimport { Web3WalletQueryClientProvider } from '@web3-wallet/react';\n\nfunction MyApp() {\n  return (\n    <>\n      <Web3WalletQueryClientProvider>\n        <App>\n      </Web3WalletQueryClientProvider>\n    </>\n  );\n}\n\n```\n\n```ts\nimport { MetaMask } from '@web3-wallet/metamask';\nimport { DefiWallet } from '@web3-wallet/defiwallet';\nimport { createCurrentWallet } from '@web3-wallet/react';\nimport { EnsPlugin } from '@web3-wallet/plugin-ens';\nimport { BalancePlugin } from '@web3-wallet/plugin-balance';\n\nconst connectors = [new MetaMask(), new DefiWallet()];\nconst plugins = [EnsPlugin.create(), BalancePlugin.create()];\n\nexport const currentWallet = new createCurrentWallet(connectors, { plugins });\n\nconst {\n  getPlugin,\n  connect,\n  autoConnect,\n  disconnect,\n  useIsConnecting,\n  useIsConnected,\n  useAccounts,\n  useChainId,\n  useProvider,\n\n  // current wallet only apis\n  useName,\n  switchCurrentWallet,\n  connectAsCurrentWallet,\n\n  // wallet apis that depends on @tanstack/query\n  useConnect,\n  useAutoConnect,\n  useDisConnect,\n  useWatchAsset,\n} = currentWallet;\n\nexport const App = () => {\n  const walletName = useName();\n  const isConnecting = useIsConnecting();\n  const isConnected = useIsConnected();\n  const chainId = useChainId();\n  const accounts = useAccounts();\n  const provider = useProvider();\n\n  // EnsPlugin and BalancePlugin are also depends on @tanstack/query\n  const { useBalances } = getPluginApi<BalancePlugin.Api>(BalancePlugin.name);\n  const { useEnsNames } = getPluginApi<EnsPlugin.Api>(EnsPlugin.name);\n\n  // @tanstack/query useQuery api\n  // see: https://tanstack.com/query/v4/docs/reference/useQuery\n  const { data, isLoading, isError, ...more } = useBalances();\n  const { data, isLoading, isError, ...more } = useEnsNames();\n\n  // @tanstack/query useMutation api\n  // see: https://tanstack.com/query/v4/docs/reference/useMutation\n  const { mutate, isLoading, isError, ...more } = useConnect(options);\n\n  mutate(\n    { chain: 1 },\n    {\n      onSuccess: () => {\n        console.log('connected to wallet');\n      },\n      onError: (error) => {\n        console.log('Failed to connect to wallet: ', error);\n      },\n    },\n  );\n\n  useEffect(() => {\n    autoConnect();\n  }, []);\n\n  // ....\n};\n```\n","toc":[{"id":"install","indent":1,"content":"Install"},{"id":"create-a-wallet","indent":1,"content":"Create a wallet"},{"id":"create-a-current-wallet","indent":1,"content":"Create a current wallet"},{"id":"use-with-tanstackquery","indent":1,"content":"Use with @tanstack/query"}]},"route":{"label":"Getting Started","slug":["getting-started"],"path":"/home/runner/work/web3-wallet/web3-wallet/docs/getting-started.md"}},"__N_SSG":true}