{"pageProps":{"docs":{"content":"# Wallet\n\n## createWallet\n\n```ts\ntype CreateWallet = (\n  connector: Connector,\n  options: {\n    plugins?: [];\n  },\n) => Wallet;\n```\n\nThe wallet object is returned from createWallet.\n\n```ts\nimport { MetaMask } from '@web3-wallet/MetaMask';\nimport { createWallet } from '@web3-wallet/react';\n\nconst metaMask = createWallet(new MetaMask());\n```\n\n## Wallet API\n\n```ts\ninterface Wallet {\n  getName: () => WalletName;\n  connect: (chain?: number | AddEthereumChainParameter) => Promise<void>;\n  autoConnect: () => Promise<boolean>;\n  disconnect: (force?: boolean) => Promise<void>;\n  watchAsset: (asset: WatchAssetParameter) => Promise<void>;\n  useIsConnecting: () => boolean;\n  useChainId: () => number | undefined;\n  useAccount: () => string | undefined;\n  useIsConnected: () => boolean;\n  useProvider: (network?: Networkish) => Web3Provider | undefined;\n  getPluginApi: <PluginApi>(pluginName: PluginName) => PluginApi;\n  useConnect: WrappedUseMutation<\n    void,\n    unknown,\n    { chain?: number | AddEthereumChainParameter } | void\n  >;\n  useAutoConnect: WrappedUseMutation<boolean, unknown, void>;\n  useDisconnect: WrappedUseMutation<\n    void,\n    unknown,\n    {\n      force?: boolean;\n    } | void\n  >;\n  useWatchAsset: WrappedUseMutation<\n    void,\n    unknown,\n    {\n      asset: WatchAssetParameter;\n    }\n  >;\n}\n```\n\n### getName\n\n```ts\ninterface Wallet {\n  getName: () => WalletName;\n}\n```\n\nReturns the wallet name. A dApp usually support create multiple wallets. The wallet name is mean to be used as the wallet id.\n\n### connect\n\n```ts\nexport interface AddEthereumChainParameter {\n  chainId: number;\n  chainName: string;\n  nativeCurrency: {\n    name: string;\n    symbol: string;\n    decimals: 18;\n  };\n  rpcUrls: string[];\n  blockExplorerUrls?: string[];\n  /**\n   * Currently ignored.\n   */\n  iconUrls?: string[];\n}\n\ntype ChainId = number\n\ninterface Wallet {\n  connect(chain?: ChainId | AddEthereumChainParameter) => Promise<void>\n}\n```\n\nInitiates a connection to the wallet. You can pass the `chain` parameter to specify the desired chain to connect to. If the user is already connected to this chain, no additional steps will be taken. Otherwise, the user will be prompted to switch to the chain, if one of two conditions is met:\n\n1. either the chain already have it added in their extension,\n2. or the argument is of type AddEthereumChainParameter, in which case the user will be prompted to add the chain with the specified parameters first, before being prompted to switch.\n\n### autoConnect\n\n```ts\ninterface Wallet {\n  autoConnect() => Promise<boolean>\n}\n```\n\nTry to connect to wallet. autoConnect never reject, it will always resolve. autoConnect only try to connect to wallet, if it don't need any further user interaction with the wallet in the connecting process.\n\nthe returned promise will:\n\n1.  resolve with `true` if the connection succeeded.\n2.  resolve with `false` if the connection failed.\n\n### disconnect\n\n```ts\ninterface Wallet {\n  disconnect(force?: boolean) => Promise<void>\n}\n```\n\nWallet connector implementors should override this method if the wallet supports force disconnect.\n\nWhat is force disconnect?\n\n- force disconnect will actually disconnect the wallet.\n- non-disconnect only reset the wallet store to it's initial state.\n\nFor some wallets, MetaMask for example, there're not way to force disconnect MetaMask.\nFor some wallets, Walletconnect for example, we are able to force disconnect Walletconnect.\n\n### watchAsset\n\n> This method is specified by [EIP-747](https://eips.ethereum.org/EIPS/eip-747)\n\n```ts\ninterface WatchAssetParameter {\n  address: string;\n  symbol: string;\n  decimals: number;\n  image: string;\n}\ninterface Wallet {\n  watchAsset: (asset: WatchAssetParameter) => Promise<void>;\n}\n```\n\nAdd an asset to the wallet assets list.\n\n### useIsConnecting\n\n```ts\ninterface Wallet {\n  useIsConnecting: () => boolean;\n}\n```\n\nIndicates whether there's a pending connection. A connection can be initiated by calling either `Wallet.connect` or `Wallet.autoConnect`.\n\n### useAccount\n\n```ts\ninterface Wallet {\n  useAccount: () => string | undefined;\n}\n```\n\nReturns the active user wallet account -- the account that the user current selected in the wallet extension/app.\n\n### useChainId\n\nReturns the active user wallet chainId -- the chain that the user current connected in the wallet extension/app.\n\n### useIsConnected\n\n```ts\ninterface Wallet {\n  useIsConnected: () => boolean;\n}\n```\n\nIndicates whether user is connected to the wallet. If `isConnected` is true, we can assume that:\n\n1. the dApp/web3 site can access to the user's account.\n2. the wallet provider can make RPC requests to the current chain.\n\nuseIsConnected is a convenient hook:\n\n```ts\nconst useIsConnected = (): boolean => {\n  return !!useAccount() && !!useChainId();\n};\n```\n\n### useProvider\n\n```ts\ninterface Wallet {\n  useProvider: (network?: Networkish) => Web3Provider | undefined;\n}\n```\n\nReturns a [Web3Provider](https://docs.ethers.io/v5/api/providers/other/#Web3Provider) instance that wraps the underling wallet provider.\n\n### getPluginApi\n\n```ts\ninterface Wallet {\n  getPluginApi: <PluginApi>(pluginName: PluginName) => PluginApi;\n}\n```\n\nGet the api of the plugin specified by `pluginName`. See [Plugin](https://web3-wallet.github.io/web3-wallet/docs/plugin).\n\nexample:\n\n```ts\nimport { ensPlugin } from '@web3-wallet/plugin-ens';\n\nconst pluginApi = getPluginApi<ensPlugin.API>(ensPlugin.pluginName);\n\nconst ensName = pluginApi.useEnsName();\n```\n\n### useAutoConnect\n\n```ts\ninterface Wallet {\n  useConnect: WrappedUseMutation<\n    void,\n    unknown,\n    { chain?: number | AddEthereumChainParameter } | void\n  >;\n}\n```\n\nconnect wrapped with [useMutation](https://tanstack.com/query/v4/docs/reference/useMutation).\n\n### useAutoConnect\n\nautoConnect wrapped with [useMutation](https://tanstack.com/query/v4/docs/reference/useMutation).\n\n### useDisConnect\n\ndisConnect wrapped with [useMutation](https://tanstack.com/query/v4/docs/reference/useMutation).\n\n### useWatchAsset\n\nuseWatchAsset wrapped with [useMutation](https://tanstack.com/query/v4/docs/reference/useMutation).\n","toc":[{"id":"createwallet","indent":1,"content":"createWallet"},{"id":"wallet-api","indent":1,"content":"Wallet API"},{"id":"getname","indent":2,"content":"getName"},{"id":"connect","indent":2,"content":"connect"},{"id":"autoconnect","indent":2,"content":"autoConnect"},{"id":"disconnect","indent":2,"content":"disconnect"},{"id":"watchasset","indent":2,"content":"watchAsset"},{"id":"useisconnecting","indent":2,"content":"useIsConnecting"},{"id":"useaccount","indent":2,"content":"useAccount"},{"id":"usechainid","indent":2,"content":"useChainId"},{"id":"useisconnected","indent":2,"content":"useIsConnected"},{"id":"useprovider","indent":2,"content":"useProvider"},{"id":"getpluginapi","indent":2,"content":"getPluginApi"},{"id":"useautoconnect","indent":2,"content":"useAutoConnect"},{"id":"useautoconnect-1","indent":2,"content":"useAutoConnect"},{"id":"usedisconnect","indent":2,"content":"useDisConnect"},{"id":"usewatchasset","indent":2,"content":"useWatchAsset"}]},"route":{"label":"Wallet","slug":["wallet"],"path":"/home/runner/work/web3-wallet/web3-wallet/docs/wallet.md"}},"__N_SSG":true}