{"pageProps":{"docs":{"content":"# Connector\n\nA connector knowns the detail of how to connect to a specific wallet application such as MetaMask and DeFi Wallet, providing a consistent abstract interface to the upper layer.\n\nConnector is a low level entity, except feeding a connector to `createWallet` and `createCurrentWallet`, you normally don't need to use connector directly in your dApp.\n\n```ts\nconst metaMaskConnector = new MetaMask();\nconst deFiWalletConnector = new DeFiWallet();\nconst metamask = createWallet(metaMaskConnector);\nconst currentWallet = createCurrentWallet([\n  metaMaskConnector,\n  deFiWalletConnector,\n]);\n```\n\n## Implement a Connector for a wallet\n\nIf you want to implement a connector for a wallet, you should extends the abstract connector class from the @web3-wallet/core package. Most of the time, a wallet connector can be implemented with few lines of code. Below is how the MetaMask connector is implemented:\n\n```ts\nimport type { Provider, ProviderRpcError, WalletName } from '@web3-wallet/core';\nimport { Connector } from '@web3-wallet/core';\n\nimport { icon } from './assets';\n\nconst providerFilter = (p: Provider) => !!p.isMetaMask;\n\nconst _name = 'MetaMask';\nexport const name = _name as WalletName<typeof _name>;\n\nexport class MetaMask extends Connector {\n  public static walletName: WalletName<string> = name;\n  public static walletIcon: string = icon;\n  public name: WalletName<string> = name;\n\n  constructor(options?: Connector['options']) {\n    super({\n      providerFilter,\n      ...options,\n    });\n  }\n}\n```\n\nCheck out more wallet connector Implementation examples [here](https://github.com/web3-wallet/web3-wallet/tree/main/packages/wallets).\n","toc":[{"id":"implement-a-connector-for-a-wallet","indent":1,"content":"Implement a Connector for a wallet"}]},"route":{"label":"Connector","slug":["connector"],"path":"/home/runner/work/web3-wallet/web3-wallet/docs/connector.md"}},"__N_SSG":true}